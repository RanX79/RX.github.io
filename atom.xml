<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://RanX79.github.io/</id>
    <title>Ran Xue</title>
    <updated>2024-11-26T07:35:01.797Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://RanX79.github.io/"/>
    <link rel="self" href="https://RanX79.github.io/atom.xml"/>
    <subtitle>是冉冉升起的冉</subtitle>
    <logo>https://RanX79.github.io/images/avatar.png</logo>
    <icon>https://RanX79.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Ran Xue</rights>
    <entry>
        <title type="html"><![CDATA[NCL计算波作用密度倾向方程]]></title>
        <id>https://RanX79.github.io/post/ncl-ji-suan-bo-zuo-yong-mi-du-qing-xiang-fang-cheng/</id>
        <link href="https://RanX79.github.io/post/ncl-ji-suan-bo-zuo-yong-mi-du-qing-xiang-fang-cheng/">
        </link>
        <updated>2024-11-26T07:22:27.000Z</updated>
        <content type="html"><![CDATA[<p>···</p>
<pre><code>undef(&quot;def_dAdt&quot;)
;输入位涡的气候态和异常场
;数据：time lat lon 
function def_dAdt(pv_cli[*][*][*]:numeric,pv_ano[*][*][*]:numeric,youwantlevel)

local pi,dName,lon,lat,level,gradpv,pv_grad_lat,pv_grad_lon,A,opt,dt,t,gradpv2,dQdy,time

begin

pi      = atan(1.0)*4.
dName   = getvardims(pv_cli)

if (any(ismissing(dName(1:)))) then
print(&quot;fatal:  def_DADt: requires that all the rightmost dimensions be named&quot;)
        exit
end if

lat     = pv_cli&amp;$dName(1)$
lon     = pv_cli&amp;$dName(2)$
; cosine
coslat  = cos(lat(:)*pi/180.)
coslat@_FillValue = default_fillvalue(typeof(coslat))
coslat  = (/where(coslat.le.0.,coslat@_FillValue,coslat)/)
; 1-D -&gt; 3-D
coslattmp   = conform_dims(dimsizes(pv_cli),coslat,1)
;------------------------------------------------------

; dQdx    = center_finite_diff_n(pv_cli,lon*pi/180., False,0,2)
dQdy    = center_finite_diff_n(pv_cli,lat*pi/180., False,0,1)
copy_VarMeta(pv_cli, dQdy)

if (any(dQdy.eq.0)) then
    print(&quot;your data: dQdy have zero!!!!&quot;)
end if

;------------------------------------------------------
gradpv       = grad_latlon_cfd(pv_cli, pv_cli&amp;latitude, pv_cli&amp;longitude, True, False)
pv_grad_lat  = gradpv[0]    
pv_grad_lon  = gradpv[1]

copy_VarMeta(pv_cli, pv_grad_lat)
copy_VarMeta(pv_cli, pv_grad_lon)

printVarSummary(pv_grad_lat)
printMinMax(pv_grad_lat, 0)

if (any(pv_grad_lat.eq.0)) then
    print(&quot;your data: pv_grad_lat have zero!!!!&quot;)
end if

if (any(pv_grad_lon.eq.0)) then
    print(&quot;your data: pv_grad_lat have zero!!!!&quot;)
end if


pv_grad_lat =where(pv_grad_lat.eq.0, pv_grad_lat@_FillValue, pv_grad_lat)
pv_grad_lon =where(pv_grad_lon.eq.0, pv_grad_lon@_FillValue, pv_grad_lon)
dQdy        =where(dQdy.eq.0,               dQdy@_FillValue, dQdy)

;------填补缺失值
guess     = 1                ; use zonal means
is_cyclic = True             ; cyclic [global]
nscan     = 1500             ; usually much less than this
eps       = 1.e-2            ; variable dependent
relc      = 0.6              ; relaxation coefficient
opt       = 0                ; not used

; poisson_grid_fill( pv_grad_lat, is_cyclic, guess, nscan, eps, relc, opt)
; poisson_grid_fill( pv_grad_lon, is_cyclic, guess, nscan, eps, relc, opt)
; poisson_grid_fill( dQdy, is_cyclic, guess, nscan, eps, relc, opt)

;------------------------------------------------------

re      = 6.37*10^6

gradpv2=sqrt(pv_grad_lat^2+pv_grad_lon^2)
copy_VarMeta(pv_cli, gradpv2)


if (any(gradpv2.eq.0)) then
    print(&quot;your data: gradpv2 have zero!!!!&quot;)
end if
gradpv2=where(gradpv2.eq.0, gradpv2@_FillValue, gradpv2)
;poisson_grid_fill( gradpv2, is_cyclic, guess, nscan, eps, relc, opt)
print(&quot;-----gradpv2-----&quot;)
printMinMax(gradpv2, 0)

;-----3种方法计算A
;A=(youwantlevel*pv_ano^2)/(2.*1000.*gradpv2)

A=(youwantlevel*pv_ano^2*re*coslattmp^2)/(2.*1000.*dQdy)

;A=(1.225*pv_ano^2)/(2.*dQdy)

copy_VarMeta(pv_cli, A)
printVarSummary(A)


print(&quot;-----pv_ano-----&quot;)
printMinMax(pv_ano, 0)
print(&quot;-----pv_ano^2-----&quot;)
printMinMax(pv_ano^2, 0)
print(&quot;-----dQdy-----&quot;)
printMinMax(dQdy^2, 0)
print(&quot;-----A-----&quot;)
printMinMax(A, 0)

;utc     =cd_calendar(pv_cli&amp;$dName(0)$, 2)
;day     = tointeger(utc(:,2))
;day=ispan(0, 60, 1)
;print(utc)

;---Convert &quot;hours since ...&quot; to &quot;seconds since ...&quot;

time    = pv_cli&amp;time   
print(time@units);hours since 1900-01-01 00:00:00

dt = 24.*3600.
t = time*3600.


if(any(ismissing(A))) then
    print(&quot;Your data: A is missing.&quot;)
end if
poisson_grid_fill( A, is_cyclic, guess, nscan, eps, relc, opt)

dAdt    = tofloat(center_finite_diff_n(A,t,False,0,0));最后一个是时间维 单位s
copy_VarMeta(pv_cli, dAdt)
printVarSummary(dAdt)
printMinMax(dAdt, 0)


return(dAdt)

end
</code></pre>
<p>···</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NCL计算波折射指数]]></title>
        <id>https://RanX79.github.io/post/ncl-ji-suan-bo-zhe-she-zhi-shu/</id>
        <link href="https://RanX79.github.io/post/ncl-ji-suan-bo-zhe-she-zhi-shu/">
        </link>
        <updated>2024-06-16T03:07:25.000Z</updated>
        <content type="html"><![CDATA[<p>去年研究了波折射指数的计算公式，当时觉得太复杂了不想写代码于是放弃，但今年突然又觉得还是算一下，于是又研究了几天，又被折磨了一下。人果然不能偷懒！</p>
<p>利用波折射指数诊断波的传播环境，计算方法:(Andrews et al.,1987)<br>
<img src="https://RanX79.github.io//post-images/1718507275798.png" alt="" loading="lazy"><br>
公式都差不多，但Weinberger et al.,(2021)这篇文章里面改变了好几个形式，我就算了一个比较原始的。<br>
<img src="https://RanX79.github.io//post-images/1718507323352.png" alt="" loading="lazy"><br>
波折射指数体现大气环流的背景场是否有利于行星波传播；但其计算是基于纬圈平均的场，实际波的反射传播是一个局地的区域现象，波折射指数只能判断背景流是否有利于波动反射，但无法准确地表征波动反射的发生，当RI＜0时，行星波发生反射；RI＞0，行星波在此区域传播，越大越容易传播；(注意是波折射指数的平方RI，看文献好像没有找到识别局地区域反射的指数，还看见一个U2-U10的定义，感觉是风场的切变，定义方法比较粗糙）。</p>
<p>Albers and Birner., (2014)文章中RI的单位是m-2，根据(f/2NH)2，f单位为s-1，NN单位为s-2，H单位为m，倒推第三项单位为m-2，合理；计算结果乘了地球半径的平方，将RI无量纲化；感觉公式算出来量级有一点奇怪，算出来主要还是以位涡第一项为主导的样子；</p>
<p>(All fields are multiplied by Earth’s radius squared, which nondimensionalizes the refractive index and gives the PV gradient the units of meters per second)<br>
<img src="https://RanX79.github.io//post-images/1718507355770.png" alt="" loading="lazy"><br>
浅浅的用ncl算了一下，结果感觉看起来还算正常？但是第一项量级有一点问题；真烦人啊啊啊啊啊啊啊啊啊啊看了一下文献中的量级差不多(Li et al.,2017)<br>
<img src="https://RanX79.github.io//post-images/1718507380531.png" alt="" loading="lazy"><br>
Li et al.,2017文章中说正负折射指数的平方会相互抵消，新定义一个负波折射指数平方的频率Fn2来诊断行星波的传播，具体的计算方法，将格点上n2为负值的一天定义为1，为正值的一天定义为0，Fn2定义为负值的天数除以总天数，Fn2合成的结果减去气候态的得到异常值，行星波在Fn2小的区域传播，在大的区域反射；<br>
<img src="https://RanX79.github.io//post-images/1718507418767.png" alt="" loading="lazy"><br>
···<br>
;============================================================<br>
; calculate QG RI index(Andrews et al.,1987)<br>
;============================================================<br>
;pv:potential vorticity;<br>
;T :basic state of air temperature;<br>
;u :basic state of  uwind;<br>
;k :zonal wavenumber(k=1 means wave 1)<br>
;Two methods:By using the pv data and calculting the pv;<br>
;if the phase speed c equals zero, the RI is treated as the stationary wave RI;<br>
;return:RI Uyy  Uzz RI1<br>
undef(&quot;def_cal_QGRI&quot;)<br>
function def_cal_QGRI(pv[<em>][</em>][<em>][</em>]:numeric,T[<em>][</em>][<em>][</em>]:numeric,u[<em>][</em>][<em>][</em>]:numeric,k[*]:numeric)<br>
local sclhgt,gc,pi,dName,level,lat,lon,re,f,density,coslat,leveltmp,coslattmp,ftmp,dthetadz,NN,pv_ZonalMean,u_ZonalMean,T_ZonalMean,k,T_ZonalMean,densitytmp,u_grad,uyy1,u_gradz,uzz1,pv_grad2,RI2,RI3</p>
<pre><code>begin
;------ scale height
sclhgt  = 7000.;units:m
; Gas constant
gc      = 290.
pi      = atan(1.0)*4.
; 自转角速度
wmg=2.*pi/(60.*60.*24.)


dName   = getvardims(pv)
level   = pv&amp;$dName(1)$
lat     = pv&amp;$dName(2)$
lon     = pv&amp;$dName(3)$
dim     =dimsizes(T)


;------Radius of the earth
re      = 6.37*10^6 ;6378388 units:m
;------Coriolis parameter
f       = lat(:)
f       = (/2.*2.*pi/(60.*60.*24.)*sin(pi/180.*f)/)

;------ cosine
coslat  = cos(lat(:)*pi/180.)
coslat@_FillValue = default_fillvalue(typeof(coslat))
coslat  = (/where(coslat.le.0.,coslat@_FillValue,coslat)/)



;zanal ano
T_ZonalMean=dim_avg_n_Wrap(T, 3)
printVarSummary(T_ZonalMean)


; 1-D -&gt; 3-D
leveltmp    = conform_dims(dimsizes(T_ZonalMean),level,1)
coslattmp   = conform_dims(dimsizes(T_ZonalMean),coslat,2)
ftmp        = conform_dims(dimsizes(T_ZonalMean),f,2)
;densitytmp = conform_dims(dimsizes(T_ZonalMean),density,1)


;ρ0=ρs*exp(-z/H)
densitytmp=1.2*(leveltmp/1000)


printVarSummary(leveltmp)  
printVarSummary(coslattmp)  
printVarSummary(ftmp)      
printVarSummary(densitytmp)
;-------------------------------------------------------------------------------
; vertical gradient of potential temperature  (K/m)
dthetadz = center_finite_diff_n(T_ZonalMean*(1000./leveltmp)^0.286,-sclhgt*log(level/1000.),False,0,1)
printVarSummary(dthetadz)


;--------------------------------------------------------------------
; Brunt Vaisala frequency
NN      = (gc*(leveltmp/1000.)^0.286)/sclhgt * dthetadz
NN@var_desc     = &quot;Brunt Vaisala frequency&quot;
NN@units        = &quot;1/s^2&quot;
NN@long_name    = &quot;basic state Brunt Vaisala frequency (TN2001)&quot;
NN@_FillValue   = T@_FillValue
NN              = where(NN.gt.0,NN,NN@_FillValue)
printVarSummary(NN)
print(&quot;-----NN-----&quot;)
printMinMax(NN, 0)


;------ zonal-mean zonal wind
u_ZonalMean=dim_avg_n_Wrap(u, 3)
printVarSummary(u_ZonalMean)
print(&quot;-----u_ZonalMean-----&quot;)
printMinMax(u_ZonalMean, 1)


;------------------------------------------------------------------------------------------------
;---------------------------求zonal mean的pv经向梯度 pv_grad
;第1项：2*自转角速度/地球半径*cos纬度
pv_grad1 =2.*wmg/re*coslattmp
print(&quot;------pv_grad1-----&quot;)
printMinMax(pv_grad1, 0)


;注意没有加负号！-uyy -uzz
;-----第2项：uyy
u_grad  =center_finite_diff_n(u_ZonalMean*coslattmp ,lat*pi/180.,False,0,2)
uyy1    =center_finite_diff_n(u_grad/coslattmp      ,lat*pi/180.,False,0,2)

uyy     =1./(re^2)*uyy1
print(&quot;-----uyy-----&quot;)
printMinMax(uyy, 0)  



;-----第3项：uzz
u_gradz     =center_finite_diff_n(u_ZonalMean,-sclhgt*log(level/1000.),False,0,1)
printVarSummary(u_gradz)  
uzz1        =center_finite_diff_n(u_gradz*densitytmp/NN,-sclhgt*log(level/1000.),False,0,1)
printVarSummary(uzz1)    


uzz=ftmp^2/densitytmp*(uzz1)
print(&quot;-----uzz-----&quot;)
printMinMax(uzz, 0)



print(&quot;-----cal pv_grad-----&quot;)
pv_grad=(/pv_grad1-uyy-uzz/)


printMinMax(pv_grad, 0)
copy_VarCoords(u_ZonalMean, pv_grad)
printVarSummary(pv_grad)
;=======================================================================
;直接使用pv的数据计算
;--------------------------------------------
pv_grad2=grad_latlon_cfd(pv, lat*pi/180., lon*pi/180., True, False)
;0为经向梯度
printVarSummary(pv_grad2)
;------ 对lon维 zonal-mean potential vorticity
pv_ZonalMean=dim_avg_n_Wrap(pv_grad2[0], 3)
print(&quot;-----data pv_grad-----&quot;)
printMinMax(pv_ZonalMean, 0)
printVarSummary(pv_ZonalMean)
;=======================================================================
;------QG RI index for the stationary wave k(c=0)

print(&quot;-----RI1-----&quot;)
RI1=pv_grad/u_ZonalMean ;有一点问题感觉！为什么量级差异这么多啊啊啊啊啊啊啊啊！！！！！！10^-10/10^1 量级不对哇啊啊啊啊！
printMinMax(RI1, 0)     ;
copy_VarCoords(u_ZonalMean, RI1)


print(&quot;-----RI2-----&quot;)
RI2=(k/(re*coslattmp))^2
printMinMax(RI2, 0)


print(&quot;-----RI3-----&quot;)
RI3=(ftmp/(2.*sclhgt))^2/NN
printMinMax(RI3, 0)



print(&quot;-----RI-----&quot;)
RI=(/RI1-RI2-RI3/)
printVarSummary(RI)
printMinMax(RI, 0)


RI=RI*re^2  ;*地球半径的平方，将折射率无量纲化(Albers and Birner,2014)；
;根据(f/2NH)^2 f单位为s-1，NN单位为s-2，H单位为m，倒推第三项单位为m-2，合理！
copy_VarCoords(T_ZonalMean, RI)
RI@units = &quot;1&quot;
RI@long_name = &quot;QGRI&quot;
;--------------------不知道返回uyy和uzz时需不需要这样处理，输出看一下结果！
uyy=-uyy*re^2
uzz=-uzz*re^2


pv_grad=pv_grad*re^2


RI1=RI1*re^2


copy_VarCoords(T_ZonalMean, uyy)
copy_VarCoords(T_ZonalMean, uzz)
uyy@long_name = &quot;uyy&quot;
uzz@long_name = &quot;uzz&quot;


copy_VarCoords(T_ZonalMean, pv_grad)
pv_grad@long_name = &quot;pv_grad&quot;
pv_grad@units = &quot;m/s&quot;


copy_VarCoords(T_ZonalMean, RI1)
RI1@long_name = &quot;RI1&quot;

print(&quot;-----re2-----&quot;)
printMinMax(RI, 0)
return([/RI,uyy,uzz,pv_grad,RI1/])
end
</code></pre>
<p>代码包括直接用pv数据计算梯度和用公式计算的，改一下输入就行，输出的变量需要啥就输出啥！</p>
<p>参考文献：</p>
<p>Andrews, D. G., J. R. Holton, and C. B. Leovy, 1987: Middle Atmosphere Dynamics. International Geophysics Series, Vol. 40, Academic Press, 489 pp.</p>
<p>Albers, J.R., Birner, T., 2014. Vortex Preconditioning due to Planetary and Gravity Waves prior to Sudden Stratospheric Warmings. Journal of the Atmospheric Sciences 71, 4028–4054.. https://doi.org/10.1175/jas-d-14-0026.1</p>
<p>Li, Q., Graf, H.-F., &amp; Giorgetta, M. A. (2007). Stationary planetary wave propagation in Northern Hemisphere winter-climatological analysis of the refractive index. Atmospheric Chemistry and Physics, 7(1), 183–200. https://doi.org/10.5194/acp-7-183-2007</p>
<p>Weinberger, I., Garfinkel, C.I., White, I.P., Birner, T., 2021. The Efficiency of Upward Wave Propagation near the Tropopause: Importance of the Form of the Refractive Index. Journal of the Atmospheric Sciences 78, 2605–2617.. https://doi.org/10.1175/jas-d-20-0267.1</p>
<script 
        src="https://utteranc.es/client.js"
        repo="RanX79/RanX79.github.io"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
</script>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NCL计算plumb波活动通量]]></title>
        <id>https://RanX79.github.io/post/ncl-ji-suan-plumb-bo-huo-dong-tong-liang/</id>
        <link href="https://RanX79.github.io/post/ncl-ji-suan-plumb-bo-huo-dong-tong-liang/">
        </link>
        <updated>2024-06-16T02:52:27.000Z</updated>
        <content type="html"><![CDATA[<p>😀开心，今天终于配置好了评论！！！本来在微信公众号就是为了评论！结果没注意现在改版不能评论了！就很烦！所以继续同步github的内容！</p>
<p>因为老师说TN通量的向下不一定是波活动通量向下传播！可能是向上的减少，其异常是减去了气候带的结果，Kodera这篇文章中也提到了这个；<br>
<img src="https://RanX79.github.io//post-images/1718506930875.png" alt="" loading="lazy"><br>
所以现在计算了一下Plumb的结果，plumb是纬向偏差，包含了时间的总场。但是不知道这两者算出来差异会不会很大！按理说感觉应该不会太大吧！<br>
2008-Kodera., et al.,-GRL-Tropospheric impact of reflected planetary waves from the stratosphere.<br>
<img src="https://RanX79.github.io//post-images/1718506949849.png" alt="" loading="lazy"><br>
<img src="https://RanX79.github.io//post-images/1718506962695.png" alt="" loading="lazy"></p>
<p>结果和摸鱼的对比了一下，大体趋势差不多，但是垂直方向没有验证，有问题联系我。</p>
<pre><code>;///////////////////////////////////////////////////////////////
;  Calculate 3-D wave-activity flux:plumb[1985]
;///////////////////////////////////////////////////////////////
;  Written by Ran,20240606.
;  E-mail: 602023280016@nju.edu.cn

;If there is a problem with the code calculation, please contact me by email.

;Input data：hgt t u v

;Note that the data downloaded by ERA5 is the gravitational potential (unites:m^2/s^2).
;The ncep data is the gravity potential height z, which needs to be multiplied by g.

;Input data must include the entire longitude！！！Because to take the zonal deviation!!

;Return value -  Four multi-dimentional arrays containing:
;                    x-component:  Fx
;                    y-component:  Fy
;                    z-component:  Fz
;                    z_ano

;Usage: [/Fx,Fy,Fz,z_ano/] = plumb_pLLL(hgt,t,u,v)


undef(&quot;plumb_pLLL&quot;)
function plumb_pLLL(hgt[*][*][*][*]:numeric,t[*][*][*][*]:numeric,u[*][*][*][*]:numeric,v[*][*][*][*]:numeric)
local re,sclhgt,k,pi,dName,level,lat,lon,f,wmg,ga,z,coslat,sin2lat,leveltmp,ftmp,coslattmp,sin2lattmp,t_ano,u_ano,v_ano,t_mean,dt_meandz,\
        S,Stmp,dvzdlon,duzdlon,dtzdlon
begin
;基本量

; Radius of the earth
re      = 6.37*10^6;6378388

; scale height
sclhgt  = 8000.

k=0.286

; pi
pi      = atan(1.0)*4.
printVarSummary(hgt)
dName   = getvardims(hgt)
if (any(ismissing(dName(1:)))) then
   print(&quot;fatal: plumb_pLLL: requires that all the rightmost dimensions be named&quot;)
   exit
end if
    level   = hgt&amp;$dName(1)$
    lat     = hgt&amp;$dName(2)$
    lon     = hgt&amp;$dName(3)$

; Coriolis parameter
f       = lat(:)
f       = (/2.*2.*pi/(60.*60.*24.)*sin(pi/180.*f)/)
f@_FillValue = hgt@_FillValue

;Rotational angular velocity of the earth
wmg=2.*pi/(60.*60.*24.) 

; Gravitational acceleration
ga      = 9.80665
z=hgt*ga
copy_VarMeta(hgt, z)
; cosine
coslat  = cos(lat(:)*pi/180.)
coslat@_FillValue = default_fillvalue(typeof(coslat))
coslat  = (/where(coslat.le.0.,coslat@_FillValue,coslat)/)

; sin2lat
sin2lat  = sin(2*(lat(:)*pi/180.))
sin2lat@_FillValue = default_fillvalue(typeof(sin2lat))
sin2lat  = (/where(sin2lat.le.0.,sin2lat@_FillValue,sin2lat)/)


; 1-D -&gt; 4-D
leveltmp   = conform_dims(dimsizes(hgt),level,1)
ftmp       = conform_dims(dimsizes(hgt),f,2)
coslattmp  = conform_dims(dimsizes(hgt),coslat,2)
sin2lattmp = conform_dims(dimsizes(hgt),sin2lat,2)
;Zonal deviation
t_ano   =dim_rmvmean_n_Wrap(t, 3)
u_ano   =dim_rmvmean_n_Wrap(u, 3)
v_ano   =dim_rmvmean_n_Wrap(v, 3)
z_ano   =dim_rmvmean_n_Wrap(z, 3)
;printVarSummary(t_ano)
;printVarSummary(z_ano)

;Zonal mean
t_mean=dim_avg_n_Wrap(t, 3)
dt_meandz = center_finite_diff_n(t_mean,-sclhgt*log(level/1000.),False,0,1)


S=dt_meandz+k*t_mean/sclhgt;
copy_VarCoords_1(hgt, S)
;printVarSummary(S)
; 3-D -&gt; 4-D
Stmp = conform_dims(dimsizes(hgt),S,(/0,1,2/))
;printVarSummary(Stmp)

; dvz/dlon
dvzdlon      =  center_finite_diff_n(v_ano*z_ano,lon*pi/180.,True,0,3)
; duz/dlon
duzdlon      =  center_finite_diff_n(u_ano*z_ano,lon*pi/180.,True,0,3)
; dtz/dlon
dtzdlon      =  center_finite_diff_n(t_ano*z_ano,lon*pi/180.,True,0,3)

;printVarSummary(sin2lattmp)
;printVarSummary(dvzdlon)
;printVarSummary(wmg)
;printVarSummary(coslattmp)

; x-component
Fx      = leveltmp/1000.*coslattmp*(v_ano*v_ano-1./(2.*wmg*re*sin2lattmp)*dvzdlon)
;printVarSummary(Fx)

; y-component
Fy      = leveltmp/1000.*coslattmp*(-u_ano*v_ano+1./(2.*wmg*re*sin2lattmp)*duzdlon)

; z-component
Fz      = leveltmp/1000.*coslattmp*(ftmp/Stmp*(v_ano*t_ano-1./(2.*wmg*re*sin2lattmp)*dtzdlon))

copy_VarCoords(hgt,Fx)
copy_VarCoords(Fx,Fy)
copy_VarCoords(Fx,Fz)

Fx@units = &quot;m^2/s^2&quot;
Fx@var_desc = &quot;wave-activity flux&quot;
Fx@long_name = &quot;x-component of wave-activity flux (Plumb1985)&quot;

Fy@units = &quot;m^2/s^2&quot;
Fy@var_desc = &quot;wave-activity flux&quot;
Fy@long_name = &quot;y-component of wave-activity flux (Plumb1985)&quot;

Fz@units = &quot;Pa m/s^2&quot;
Fz@var_desc = &quot;wave-activity flux&quot;
Fz@long_name = &quot;z-component of wave-activity flux (Plumb1985)&quot;

return [/Fx,Fy,Fz,z_ano/]

end
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://RanX79.github.io//post-images/1718507171115.png" alt="" loading="lazy"></figure>
<script src="https://utteranc.es/client.js"
        repo="RanX79/RanX79.github.io"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
</script>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ncl画斜剖面]]></title>
        <id>https://RanX79.github.io/post/ncl-hua-xie-pou-mian/</id>
        <link href="https://RanX79.github.io/post/ncl-hua-xie-pou-mian/">
        </link>
        <updated>2024-03-15T06:23:54.000Z</updated>
        <content type="html"><![CDATA[<p>趁着今天顺利挂上了github，赶紧同步一下！</p>
<p>主要参考ncl官网中的例子：<a href="https://www.ncl.ucar.edu/Applications/height_lat.shtml">narr_5.ncl</a>，但该例子多了对曲面网格数据的处理,首先利用了ESMF_regrid_with_weights进行网格化生成直线网格，如果用再分析资料个人觉得可以不用这一步。</p>
<p>主要分为两步，首先是大圆路径，主要使用ncl中gc_latlon这个函数，该函数中设置变量时有一个常数npts，为x轴的点数，根据需要设置，一般设置越大数据越密。接下来进行插值，使用双线性插值从直线网格插值到非结构化网格，使用linint2_points_Wrap这个函数。</p>
<p>在实际画图中，遇到的问题是最后画图设置的经纬度，因为地球是球面，所以经纬度不是均匀的，设置时需要画gc_latlon 函数对应的经纬度。在选择的经度范围跨越半球时，两点之间的方向不可控制，这是因为gc_latlon这个函数的问题，试了多次也没解决，只能选择不跨越半球了。<br>
If the two specified points are exactly opposite one another on the globe, the code does not fail, but the direction of the great circle route will be somewhat unpredictable. Setting npts &lt;= 2 has the effect of just calculating the great circle distance between the two input points. No lat/lon points will be interpolated in between.<br>
最后出现的警告，猜测是由于网格的不均匀分布造成的，但对画图的结果好像没有影响。<br>
warning:ScalarFieldSetValues: irregular coordinate array sfXArray non-monotonic: defaulting sfXArray<br>
更新一下，最后出现的警告是因为我！写代码的时候忘记删掉cyclic=&quot;True&quot;这一行设置了！所以坐标就会出现警告！（问题不大</p>
<pre><code>;=================================================================

;----------------斜刨面

;  calculate great circle along transect

npts=600 ;The actual number of interpolated points is npts-2.

N1=npts-1

nLabels      = 5   ;x轴坐标想要的标签数目

fiCyclicX    =True ;注意数据是否循环

;选取的两个点

leftlat  =  45

rightlat =  80

leftlon  =  300

rightlon =  357.5

;attention:数据是从0-360 or -180-180

;lonFlip 可以使用该函数转换

dist = gc_latlon(leftlat,leftlon, rightlat,rightlon, npts,2) ;大圆路径

;插值 变量为Fx_pos_10_area

xlon=Fx_pos_10_area&amp;lon

xlat=Fx_pos_10_area&amp;lat

Fx_pos_10_cross = linint2_points_Wrap(xlon,xlat,Fx_pos_10_area,fiCyclicX,dist@gclon,dist@gclat,2)

;插值后赋予变量属性

Fx_pos_10_cross!0      = &quot;time&quot;

Fx_pos_10_cross!1      = &quot;level&quot;

Fx_pos_10_cross&amp;level= Fx_pos_10_area&amp;level

;-----对应的经纬度

latXsecUser  = dist@gclat      ; convenience

lonXsecUser  = dist@gclon

print (dist@gclat+&quot;  &quot;+dist@gclon )  ; print the lats/lons

;--------画图时x轴坐标设置

;数据从0-360

XBValues_pos    = toint( fspan(0,N1,nLabels) )

XBLabels_pos    = new(nLabels,&quot;string&quot;)

do i=0,nLabels-1

x = lonXsecUser(XBValues_pos(i))

y = latXsecUser(XBValues_pos(i))

if(x.lt.180)then
XBLabels_pos(i) = sprintf(&quot;%3.1f&quot;, y)+&quot;N&quot;+&quot;~C~&quot;+sprintf(&quot;%3.1f&quot;, x)+&quot;E&quot;

else if(x.gt.180.and.x.le.360)then

x1=360-x

XBLabels_pos(i) = sprintf(&quot;%3.1f&quot;, y)+&quot;N&quot;+&quot;~C~&quot;+sprintf(&quot;%3.1f&quot;,x1)+&quot;W&quot;

else if(x.eq.180.or.x.eq.360)then

XBLabels_pos(i) = sprintf(&quot;%5.1f&quot;, y)+&quot;N&quot;+&quot;~C~&quot;+sprintf(&quot;%5.1f&quot;, x)
end if

end if

end if

end do

res@tmXBMode   = &quot;Explicit&quot;

res@tmXBValues = XBValues_pos

res@tmXBLabels = XBLabels_pos
</code></pre>
<p>图片类似这样吧！<br>
<img src="https://RanX79.github.io//post-images/1710485272971.png" alt="" loading="lazy"></p>
<p>ps：最近读文献才发现，看你研究方向热不热门，就看看高质量期刊新出的文章跟你的方向差不多的多不多；然后发现我的方向真！离大谱！（不是 我爱科研</p>
]]></content>
    </entry>
</feed>