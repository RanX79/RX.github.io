<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ranx79.github.io/RX.github.io/</id>
    <title>Ran Xue</title>
    <updated>2022-08-28T04:42:25.079Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ranx79.github.io/RX.github.io/"/>
    <link rel="self" href="https://ranx79.github.io/RX.github.io/atom.xml"/>
    <subtitle>是冉冉升起的冉</subtitle>
    <logo>https://ranx79.github.io/RX.github.io/images/avatar.png</logo>
    <icon>https://ranx79.github.io/RX.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Ran Xue</rights>
    <entry>
        <title type="html"><![CDATA[NCL奇异值分解]]></title>
        <id>https://ranx79.github.io/RX.github.io/post/ncl-qi-yi-zhi-fen-jie/</id>
        <link href="https://ranx79.github.io/RX.github.io/post/ncl-qi-yi-zhi-fen-jie/">
        </link>
        <updated>2022-08-26T07:15:55.000Z</updated>
        <summary type="html"><![CDATA[<p>SVD方法</p>
]]></summary>
        <content type="html"><![CDATA[<p>SVD方法</p>
<!-- more -->
<p>奇异值分解SVD(Singular Value Decomposition)是一种矩阵分解方法，在气象领域中常用来<strong>分析两个气象场</strong>场之间的相关关系。<br>
<strong>SVD方法中几个特殊名词的概念</strong></p>
<pre><code>左场，右场，分别对应我们的要求的两个变量场，谁左谁右并不重要。
左场提取的模态称为左奇异向量，右场提取的模态为右奇异向量。需要注意的是，各个场的奇异向量均为相互正交的。
第一左奇异向量和第一右奇异向量及其各自的时间系数共同构成了SVD的第一模态，也可以叫第一对模态。
总体相关系数，指的是一对奇异向量对应的左右时间系数的相关系数，用来看左场第一模态和右场第一模态的相关性（总体相关系数是一个数）。
同性相关系数，表示原场和原场某一模态的时间序列的相关系数（为一个场），在一定程度上可以反应该变量的一个遥相关型。
异性相关系数，代表原场（比如左场）和对立场（比如右场）某个模态的时间序列的相关系数（为一个场），表是一个场对另一个场的影响关键区。
</code></pre>
<p>NCL的函数库中与SVD相关的函数包括<strong>svd_lapack，svdcov，svdcov_sv，svdstd，svdstd_sv</strong>。</p>
<p><strong>svd_lapack</strong></p>
<pre><code>用于计算一般矩形矩阵的奇异值分解。具体写法为：
s   = svd_lapack (a, &quot;S&quot; , &quot;S&quot;, 0,  u, v)
这里，a是一个(/nca,nra/)矩阵，两个“S”为固定写法，0表示输出v时不转置(1则表示转置v)，
u和v 分别为左、右奇异向量，u的长度和属性都和a相同，而v的长度为(/nca,nca/)，属性也与a相同。
</code></pre>
<p><strong>svdcov</strong></p>
<pre><code>对两个场进行奇异值分解，并返回与这两个场相关的左右同构和异构数组。具体写法为：
svd_rv = svdcov(s,z,nsvd,homlft,hetlft,homrgt,hetrgt)
这里，s为(/ncols,ntime/)的气象场，z为(/ncolz,ntime/), 二者都为float或者double。     
nsvd为计算的svd模态数。homlft,hetlft,homrgt,hetrgt分别为左同构场、左异构场、右同构场合右异构场。
它们的属性如下：
        homlft：(/nsvd,ncols/),typeof(s)  hetlft：(/nsvd,ncols/),typeof(s)
        homrgt：((/nsvd,ncolz/),typeof(s)
        hetrgt：((/nsvd,ncolz/),typeof(s)
时间系数为：
        ak   = onedtond(svd_rv@ak,(/nsvd,ntime/)) 
        bk   = onedtond(svd_rv@bk,(/nsvd,ntime/))  
        ak!0 = &quot;sv&quot;  
        ak!1 = &quot;time&quot;  
        bk!0 = &quot;sv&quot;  
        bk!1 = &quot;time&quot;
</code></pre>
<p><strong>svdcov_sv</strong></p>
<pre><code>该命令与svdcov的区别在于，它只返回两个输入数据集相关联的左右奇异向量。
</code></pre>
<p><strong>svdstd、svdstd_sv</strong></p>
<pre><code>它们与svdcov、svdcov_sv的区别在于，它们首先对输入的数组进行了标准化处理，然后再进行SVD计算，而svdcov、svdcov_sv不会对输入的数据进行标准化处理。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习 day2]]></title>
        <id>https://ranx79.github.io/RX.github.io/post/python-xue-xi-day2/</id>
        <link href="https://ranx79.github.io/RX.github.io/post/python-xue-xi-day2/">
        </link>
        <updated>2022-08-24T02:12:37.000Z</updated>
        <summary type="html"><![CDATA[<p>使用 list和tuple两种集合[ ]和( )</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用 list和tuple两种集合[ ]和( )</p>
<!-- more -->
<h3 id="list">List</h3>
<p>list是一种有序的集合，可以随时添加和删除其中的元素，用<strong>len()<strong>函数可以获得list元素的个数，用索引来访问list中每一个位置的元素，记得索引是</strong>从0开始</strong>的。</p>
<pre><code>example:
列出班里所有同学的名字，就可以用一个list表示：
&gt;&gt;&gt; classmates = ['Michael', 'Bob', 'Tracy']
&gt;&gt;&gt; classmates
['Michael', 'Bob', 'Tracy']

&gt;&gt;&gt; len(classmates)
3
&gt;&gt;&gt; classmates[0]
'Michael'
&gt;&gt;&gt; classmates[-1]
'Tracy'
&gt;&gt;&gt; classmates[-2]
'Bob'
</code></pre>
<p>❗️当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得<em>最后一个元素的索引是len(classmates) - 1</em>。❗️<br>
如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素.<s>(it's very easy)</s></p>
<pre><code>classmates[-1]
</code></pre>
<p>list是一个可变的有序表，所以，可以往list中追加元素到末尾：</p>
<pre><code>&gt;&gt;&gt; classmates.append('Adam')
&gt;&gt;&gt; classmates
['Michael', 'Bob', 'Tracy', 'Adam']
</code></pre>
<p>也可以把元素插入到指定的位置，比如索引号为1的位置：</p>
<pre><code>&gt;&gt;&gt; classmates.insert(1, 'Jack')
&gt;&gt;&gt; classmates
['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
</code></pre>
<p>要删除list末尾的元素，用pop()方法：</p>
<pre><code>&gt;&gt;&gt; classmates.pop()
'Adam'
&gt;&gt;&gt; classmates
['Michael', 'Jack', 'Bob', 'Tracy']
</code></pre>
<p>要删除指定位置的元素，用pop(i)方法，其中i是索引位置：</p>
<pre><code>&gt;&gt;&gt; classmates.pop(1)
'Jack'
&gt;&gt;&gt; classmates
['Michael', 'Bob', 'Tracy']
</code></pre>
<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p>
<pre><code>&gt;&gt;&gt; classmates[1] = 'Sarah'
&gt;&gt;&gt; classmates
['Michael', 'Sarah', 'Tracy']
</code></pre>
<p>list里面的元素的数据类型也可以不同，比如：</p>
<pre><code>&gt;&gt;&gt; L = ['Apple', 123, True]
</code></pre>
<p>list元素也可以是另一个list，比如：</p>
<pre><code>&gt;&gt;&gt; s = ['python', 'java', ['asp', 'php'], 'scheme']
&gt;&gt;&gt; len(s)
4
</code></pre>
<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：</p>
<pre><code>&gt;&gt;&gt; p = ['asp', 'php']
&gt;&gt;&gt; s = ['python', 'java', p, 'scheme']
</code></pre>
<p>要拿到'php'可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>
<p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</p>
<pre><code>&gt;&gt;&gt; L = []
&gt;&gt;&gt; len(L)
0
</code></pre>
<h3 id="tuple">Tuple</h3>
<!-- more -->
<p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是<strong>tuple一旦初始化就不能修改</strong>，比如同样是列出同学的名字：</p>
<pre><code>&gt;&gt;&gt; classmates = ('Michael', 'Bob', 'Tracy')
</code></pre>
<p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但<strong>不能赋值成另外的元素。</strong></p>
<p>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：</p>
<pre><code>&gt;&gt;&gt; t = (1, 2)
&gt;&gt;&gt; t
(1, 2)
</code></pre>
<p>如果要定义一个空的tuple，可以写成()：</p>
<pre><code>&gt;&gt;&gt; t = ()
&gt;&gt;&gt; t
()
</code></pre>
<p>但是，要定义一个只有1个元素的tuple，如果你这么定义：</p>
<pre><code>&gt;&gt;&gt; t = (1)
&gt;&gt;&gt; t
1
</code></pre>
<p>定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。</p>
<p>所以，<strong>只有1个元素的tuple定义时必须加一个逗号</strong>,，来消除歧义：</p>
<pre><code>&gt;&gt;&gt; t = (1,)
&gt;&gt;&gt; t
(1,)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown常用语法]]></title>
        <id>https://ranx79.github.io/RX.github.io/post/markdown-chang-yong-yu-fa/</id>
        <link href="https://ranx79.github.io/RX.github.io/post/markdown-chang-yong-yu-fa/">
        </link>
        <updated>2022-08-23T02:49:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-标题">1 标题</h1>
<pre><code>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。
</code></pre>
<h1 id="2-字体">2 字体</h1>
<p>加粗：要加粗的文字左右分别用<strong>两个*号</strong>包起来<br>
斜体：要倾斜的文字左右分别用<strong>一个*号</strong>包起来<br>
斜体加粗：要倾斜和加粗的文字左右分别用<strong>三个*号</strong>包起来<br>
删除线：要加删除线的文字左右分别用<strong>两个~~号</strong>包起来<br>
example：<br>
<strong>这是加粗的文字</strong><br>
<em>这是倾斜的文字</em>`<br>
<em><strong>这是斜体加粗的文字</strong></em><br>
<s>这是加删除线的文字</s></p>
<h1 id="3-引用">3 引用</h1>
<p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; n个...<br>
example：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容<br>
#4 图片<br>
![图片alt](图片地址 ''图片title'')</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>
图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p>
<h1 id="5-超链接">5 超链接</h1>
<p><a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接名</a><br>
title可加可不加<br>
<a href="超链接地址" target="_blank">超链接名</a></p>
<h1 id="代码">代码</h1>
<p>单行代码：代码之间分别用一个反引号包起来<br>
<code>代码内容</code><br>
代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>
(<code>)     print('学习好累')      print('但是')     print('今天也要加油哦！') (</code>)</p>
<h1 id="流程图">流程图</h1>
<pre><code class="language-flow">st=&gt;start: 开始
op=&gt;operation: My Operation
cond=&gt;condition: Yes or No?
e=&gt;end
st-&gt;op-&gt;cond
cond(yes)-&gt;e
cond(no)-&gt;op
&amp;```

~~~mermaid
graph TD
A --&gt; B
​~~~</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习 day1]]></title>
        <id>https://ranx79.github.io/RX.github.io/post/python-xue-xi-ri-zhi/</id>
        <link href="https://ranx79.github.io/RX.github.io/post/python-xue-xi-ri-zhi/">
        </link>
        <updated>2022-08-23T02:35:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="day-1">day 1</h1>
<p>如果遇到SyntaxError，表示输入的Python代码有语法错误，最常见的一种语法错误是使用了中文标点，例如使用了中文括号（）或者使用了中文引号“和”</p>
<p><strong>以#开头的语句表示注释</strong>，当语句以冒号:结尾时，缩进的语句视为代码块。按照约定俗成的惯例，应该始终坚持使用4个空格的缩进。缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像格式化Java代码那样格式化Python代码。</p>
<p>最后，请务必注意，<strong>Python程序是大小写敏感</strong>的，如果写错了大小写，程序会报错。<br>
<em><strong>在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。</strong></em></p>
<p>Python允许在数字中间以_分隔，因此，写成10_000_000_000和10000000000是完全一样的。<br>
字符串是以单引号'或双引号&quot;括起来的任意文本。<br>
对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5<br>
转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p>
<p><strong>布尔值</strong></p>
<pre><code>一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：
&gt;&gt;&gt; True
True
&gt;&gt;&gt; False
False
&gt;&gt;&gt; 3 &gt; 2
True
&gt;&gt;&gt; 3 &gt; 5
False

布尔值可以用and、or和not运算。and运算是与运算，只有所有都为True，and运算结果才是True：
&gt;&gt;&gt; True and True
True
&gt;&gt;&gt; True and False
False
&gt;&gt;&gt; False and False
False
&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1
True

or运算是或运算，只要其中有一个为True，or运算结果就是True：
&gt;&gt;&gt; True or True
True
&gt;&gt;&gt; True or False
True
&gt;&gt;&gt; False or False
False
&gt;&gt;&gt; 5 &gt; 3 or 1 &gt; 3
True

not运算是非运算，它是一个单目运算符，把True变成False，False变成True：
&gt;&gt;&gt; not True
False
&gt;&gt;&gt; not False
True
&gt;&gt;&gt; not 1 &gt; 2
True
</code></pre>
<p>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量。</p>
<p>常见的占位符有：</p>
<p>占位符	替换内容<br>
%d	整数<br>
%f	浮点数<br>
%s	字符串<br>
%x	十六进制整数</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[功率谱分析]]></title>
        <id>https://ranx79.github.io/RX.github.io/post/gong-lu-pu-fen-xi/</id>
        <link href="https://ranx79.github.io/RX.github.io/post/gong-lu-pu-fen-xi/">
        </link>
        <updated>2022-08-09T02:35:46.000Z</updated>
        <summary type="html"><![CDATA[<p>ncl功率谱分析和小波分析</p>
]]></summary>
        <content type="html"><![CDATA[<p>ncl功率谱分析和小波分析</p>
<!-- more -->
<h3 id="功率谱分析-季节内变化的周期">功率谱分析 季节内变化的周期</h3>
<p>my aim<br>
对1960-2020年的10-4月位势高度进行EOF分析后，得到其时间序列PC1，对PC1进行功率谱分析，研究其季节内时间尺度。</p>
<!-- more -->
<p>Q1:年数据预处理是否需要滤波？滤波的周期选择？取异常场？</p>
<h3 id="利用ncl进行功率谱分析">利用ncl进行功率谱分析</h3>
<p>ncl中specxy_anal函数，离散功率谱？年的PC1数据怎么功率谱分析之后变成日的序列？（需要使用逐日的数据）</p>
<p>###小波分析 年代际周期的变化<br>
小波分析：2-5年的周期？？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea远程连接GitHub]]></title>
        <id>https://ranx79.github.io/RX.github.io/post/gridea-yuan-cheng-lian-jie-github-bao-cuo/</id>
        <link href="https://ranx79.github.io/RX.github.io/post/gridea-yuan-cheng-lian-jie-github-bao-cuo/">
        </link>
        <updated>2022-08-08T07:51:52.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>My Address:https://ranx79.github.io/RX.github.io/</p>
<h1 id="gridea远程连接github报错">Gridea远程连接GitHub报错：</h1>
<h2 id="1-connect-etimedout-20205243166443">* 1 connect ETIMEDOUT 20.205.243.166:443</h2>
<h3 id="解决方法">解决方法：</h3>
<pre><code>手动绑定访问最快的节点ip
Steps：
1）输入地址
[网址] (https://ping.chinaz.com)
在ping检测中输入域名https://github.com；
2）在检测中找到未超时且响应时间最短的IP；
3）打开C:\Windows\System32\drivers\etc\hosts，在最后加上DNS解析；
修改hosts文件
1.在系统开始菜单中，找到并右击Windows PowerShell以管理员身份运行；
2.输入命令 cd C:\Windows\System32\drivers\etc 切换至hosts文件目录；
3.输入命令notepad hosts，用记事本打开hosts文件；
在文件最后添加复制的最短的IP号  github.com
4.修改后，按Ctrl+S保存即可
</code></pre>
<h2 id="2-unable-to-verify-the-first-certificate">* 2 unable to verify the first certificate</h2>
<pre><code>关掉fastgithub即可；
</code></pre>
<h2 id="3-read-econnreset">* 3 read ECONNRESET</h2>
<pre><code>远程连接成功，但同步失败。
</code></pre>
<!-- more -->
]]></content>
    </entry>
</feed>